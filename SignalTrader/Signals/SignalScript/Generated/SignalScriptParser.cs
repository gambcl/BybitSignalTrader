//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/cogamble/Projects/Personal/SignalTrader/SignalTrader/Signals/SignalScript/SignalScript.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SignalTrader.Signals.SignalScript.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SignalScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WS=2, COMMENT=3, STRING=4, TRUE=5, FALSE=6, SHORT=7, LONG=8, BUY=9, 
		SELL=10, BID=11, ASK=12, LAST=13, MARKET=14, LIMIT=15, CROSS=16, ISOLATED=17, 
		ID=18, FLOAT=19, FLOATP=20, INT=21, INTP=22, ASSIGN=23, PERCENT=24, LPAREN=25, 
		RPAREN=26, LBRACE=27, RBRACE=28, SEMI=29, COMMA=30, NEWLINE=31;
	public const int
		RULE_signal = 0, RULE_signalblock = 1, RULE_account = 2, RULE_funclist = 3, 
		RULE_func = 4, RULE_namedparamlist = 5, RULE_namedparam = 6, RULE_paramvalue = 7, 
		RULE_boolean = 8, RULE_side = 9, RULE_direction = 10, RULE_price = 11, 
		RULE_order = 12, RULE_leverage = 13;
	public static readonly string[] ruleNames = {
		"signal", "signalblock", "account", "funclist", "func", "namedparamlist", 
		"namedparam", "paramvalue", "boolean", "side", "direction", "price", "order", 
		"leverage"
	};

	private static readonly string[] _LiteralNames = {
		null, "'signal'", null, null, null, "'true'", "'false'", "'short'", "'long'", 
		"'buy'", "'sell'", "'bid'", "'ask'", "'last'", "'market'", "'limit'", 
		"'cross'", "'isolated'", null, null, null, null, null, "'='", "'%'", "'('", 
		"')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WS", "COMMENT", "STRING", "TRUE", "FALSE", "SHORT", "LONG", 
		"BUY", "SELL", "BID", "ASK", "LAST", "MARKET", "LIMIT", "CROSS", "ISOLATED", 
		"ID", "FLOAT", "FLOATP", "INT", "INTP", "ASSIGN", "PERCENT", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SignalScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SignalScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SignalScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SignalScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SignalContext : ParserRuleContext {
		public NamedparamlistContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SignalScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SignalScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SignalScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedparamlistContext namedparamlist() {
			return GetRuleContext<NamedparamlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(SignalScriptParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalblockContext signalblock() {
			return GetRuleContext<SignalblockContext>(0);
		}
		public SignalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterSignal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitSignal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalContext signal() {
		SignalContext _localctx = new SignalContext(Context, State);
		EnterRule(_localctx, 0, RULE_signal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(T__0);
			State = 29;
			Match(LPAREN);
			State = 30;
			_localctx.parameters = namedparamlist();
			State = 31;
			Match(RPAREN);
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				{
				State = 32;
				Match(SEMI);
				}
				break;
			case LBRACE:
				{
				State = 33;
				signalblock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SignalScriptParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SignalScriptParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccountContext[] account() {
			return GetRuleContexts<AccountContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountContext account(int i) {
			return GetRuleContext<AccountContext>(i);
		}
		public SignalblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterSignalblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitSignalblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalblockContext signalblock() {
		SignalblockContext _localctx = new SignalblockContext(Context, State);
		EnterRule(_localctx, 2, RULE_signalblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(LBRACE);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 39;
				account();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountContext : ParserRuleContext {
		public IToken name;
		public NamedparamlistContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SignalScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SignalScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SignalScriptParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunclistContext funclist() {
			return GetRuleContext<FunclistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SignalScriptParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SignalScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedparamlistContext namedparamlist() {
			return GetRuleContext<NamedparamlistContext>(0);
		}
		public AccountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_account; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterAccount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitAccount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountContext account() {
		AccountContext _localctx = new AccountContext(Context, State);
		EnterRule(_localctx, 4, RULE_account);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_localctx.name = Match(ID);
			State = 48;
			Match(LPAREN);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 49;
				_localctx.parameters = namedparamlist();
				}
			}

			State = 52;
			Match(RPAREN);
			State = 53;
			Match(LBRACE);
			State = 54;
			funclist();
			State = 55;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunclistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public FunclistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funclist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterFunclist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitFunclist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunclist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunclistContext funclist() {
		FunclistContext _localctx = new FunclistContext(Context, State);
		EnterRule(_localctx, 6, RULE_funclist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 57;
				func();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public IToken name;
		public NamedparamlistContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SignalScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SignalScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(SignalScriptParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SignalScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedparamlistContext namedparamlist() {
			return GetRuleContext<NamedparamlistContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 8, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_localctx.name = Match(ID);
			State = 64;
			Match(LPAREN);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 65;
				_localctx.parameters = namedparamlist();
				}
			}

			State = 68;
			Match(RPAREN);
			State = 69;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedparamlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedparamContext[] namedparam() {
			return GetRuleContexts<NamedparamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedparamContext namedparam(int i) {
			return GetRuleContext<NamedparamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SignalScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SignalScriptParser.COMMA, i);
		}
		public NamedparamlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedparamlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterNamedparamlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitNamedparamlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedparamlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedparamlistContext namedparamlist() {
		NamedparamlistContext _localctx = new NamedparamlistContext(Context, State);
		EnterRule(_localctx, 10, RULE_namedparamlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			namedparam();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72;
				Match(COMMA);
				State = 73;
				namedparam();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedparamContext : ParserRuleContext {
		public IToken name;
		public ParamvalueContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SignalScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SignalScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamvalueContext paramvalue() {
			return GetRuleContext<ParamvalueContext>(0);
		}
		public NamedparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedparam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterNamedparam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitNamedparam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedparamContext namedparam() {
		NamedparamContext _localctx = new NamedparamContext(Context, State);
		EnterRule(_localctx, 12, RULE_namedparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_localctx.name = Match(ID);
			State = 80;
			Match(ASSIGN);
			State = 81;
			_localctx.value = paramvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamvalueContext : ParserRuleContext {
		public ParamvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramvalue; } }
	 
		public ParamvalueContext() { }
		public virtual void CopyFrom(ParamvalueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LeverageParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeverageContext leverage() {
			return GetRuleContext<LeverageContext>(0);
		}
		public LeverageParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterLeverageParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitLeverageParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeverageParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterBooleanParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitBooleanParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrderParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public OrderParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterOrderParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitOrderParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SignalScriptParser.INT, 0); }
		public IntParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterIntParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitIntParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SignalScriptParser.ID, 0); }
		public IdentifierParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirectionParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public DirectionParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterDirectionParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitDirectionParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectionParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriceParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public PriceContext price() {
			return GetRuleContext<PriceContext>(0);
		}
		public PriceParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterPriceParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitPriceParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriceParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SideParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public SideContext side() {
			return GetRuleContext<SideContext>(0);
		}
		public SideParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterSideParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitSideParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSideParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntPercentParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTP() { return GetToken(SignalScriptParser.INTP, 0); }
		public IntPercentParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterIntPercentParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitIntPercentParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntPercentParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SignalScriptParser.FLOAT, 0); }
		public FloatParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterFloatParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitFloatParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatPercentParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATP() { return GetToken(SignalScriptParser.FLOATP, 0); }
		public FloatPercentParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterFloatPercentParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitFloatPercentParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatPercentParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringParamValueContext : ParamvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SignalScriptParser.STRING, 0); }
		public StringParamValueContext(ParamvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterStringParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitStringParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamvalueContext paramvalue() {
		ParamvalueContext _localctx = new ParamvalueContext(Context, State);
		EnterRule(_localctx, 14, RULE_paramvalue);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new StringParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(STRING);
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BooleanParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				boolean();
				}
				break;
			case BUY:
			case SELL:
				_localctx = new SideParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				side();
				}
				break;
			case SHORT:
			case LONG:
				_localctx = new DirectionParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				direction();
				}
				break;
			case BID:
			case ASK:
			case LAST:
				_localctx = new PriceParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				price();
				}
				break;
			case MARKET:
			case LIMIT:
				_localctx = new OrderParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				order();
				}
				break;
			case CROSS:
			case ISOLATED:
				_localctx = new LeverageParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				leverage();
				}
				break;
			case ID:
				_localctx = new IdentifierParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 90;
				Match(ID);
				}
				break;
			case FLOAT:
				_localctx = new FloatParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 91;
				Match(FLOAT);
				}
				break;
			case FLOATP:
				_localctx = new FloatPercentParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 92;
				Match(FLOATP);
				}
				break;
			case INT:
				_localctx = new IntParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 93;
				Match(INT);
				}
				break;
			case INTP:
				_localctx = new IntPercentParamValueContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 94;
				Match(INTP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
	 
		public BooleanContext() { }
		public virtual void CopyFrom(BooleanContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FalseValueContext : BooleanContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SignalScriptParser.FALSE, 0); }
		public FalseValueContext(BooleanContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterFalseValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitFalseValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueValueContext : BooleanContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SignalScriptParser.TRUE, 0); }
		public TrueValueContext(BooleanContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterTrueValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitTrueValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 16, RULE_boolean);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				_localctx = new TrueValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SideContext : ParserRuleContext {
		public SideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_side; } }
	 
		public SideContext() { }
		public virtual void CopyFrom(SideContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BuySideContext : SideContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUY() { return GetToken(SignalScriptParser.BUY, 0); }
		public BuySideContext(SideContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterBuySide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitBuySide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuySide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SellSideContext : SideContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELL() { return GetToken(SignalScriptParser.SELL, 0); }
		public SellSideContext(SideContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterSellSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitSellSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSellSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SideContext side() {
		SideContext _localctx = new SideContext(Context, State);
		EnterRule(_localctx, 18, RULE_side);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUY:
				_localctx = new BuySideContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				Match(BUY);
				}
				break;
			case SELL:
				_localctx = new SellSideContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				Match(SELL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
	 
		public DirectionContext() { }
		public virtual void CopyFrom(DirectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShortDirectionContext : DirectionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(SignalScriptParser.SHORT, 0); }
		public ShortDirectionContext(DirectionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterShortDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitShortDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortDirection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongDirectionContext : DirectionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(SignalScriptParser.LONG, 0); }
		public LongDirectionContext(DirectionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterLongDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitLongDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_direction);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LONG:
				_localctx = new LongDirectionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(LONG);
				}
				break;
			case SHORT:
				_localctx = new ShortDirectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				Match(SHORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PriceContext : ParserRuleContext {
		public PriceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_price; } }
	 
		public PriceContext() { }
		public virtual void CopyFrom(PriceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AskPriceContext : PriceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASK() { return GetToken(SignalScriptParser.ASK, 0); }
		public AskPriceContext(PriceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterAskPrice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitAskPrice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAskPrice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BidPriceContext : PriceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BID() { return GetToken(SignalScriptParser.BID, 0); }
		public BidPriceContext(PriceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterBidPrice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitBidPrice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBidPrice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LastPriceContext : PriceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SignalScriptParser.LAST, 0); }
		public LastPriceContext(PriceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterLastPrice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitLastPrice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastPrice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PriceContext price() {
		PriceContext _localctx = new PriceContext(Context, State);
		EnterRule(_localctx, 22, RULE_price);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BID:
				_localctx = new BidPriceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(BID);
				}
				break;
			case ASK:
				_localctx = new AskPriceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				Match(ASK);
				}
				break;
			case LAST:
				_localctx = new LastPriceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				Match(LAST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
	 
		public OrderContext() { }
		public virtual void CopyFrom(OrderContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MarketOrderContext : OrderContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MARKET() { return GetToken(SignalScriptParser.MARKET, 0); }
		public MarketOrderContext(OrderContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterMarketOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitMarketOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarketOrder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LimitOrderContext : OrderContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SignalScriptParser.LIMIT, 0); }
		public LimitOrderContext(OrderContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterLimitOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitLimitOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 24, RULE_order);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MARKET:
				_localctx = new MarketOrderContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				Match(MARKET);
				}
				break;
			case LIMIT:
				_localctx = new LimitOrderContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				Match(LIMIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeverageContext : ParserRuleContext {
		public LeverageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leverage; } }
	 
		public LeverageContext() { }
		public virtual void CopyFrom(LeverageContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsolatedLeverageContext : LeverageContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATED() { return GetToken(SignalScriptParser.ISOLATED, 0); }
		public IsolatedLeverageContext(LeverageContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterIsolatedLeverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitIsolatedLeverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsolatedLeverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CrossLeverageContext : LeverageContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(SignalScriptParser.CROSS, 0); }
		public CrossLeverageContext(LeverageContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.EnterCrossLeverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISignalScriptListener typedListener = listener as ISignalScriptListener;
			if (typedListener != null) typedListener.ExitCrossLeverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISignalScriptVisitor<TResult> typedVisitor = visitor as ISignalScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrossLeverage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeverageContext leverage() {
		LeverageContext _localctx = new LeverageContext(Context, State);
		EnterRule(_localctx, 26, RULE_leverage);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
				_localctx = new CrossLeverageContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(CROSS);
				}
				break;
			case ISOLATED:
				_localctx = new IsolatedLeverageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(ISOLATED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,123,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,0,1,0,1,0,3,0,35,8,0,1,0,1,0,1,1,1,1,5,1,41,8,1,10,1,12,1,44,9,1,1,
		1,1,1,1,2,1,2,1,2,3,2,51,8,2,1,2,1,2,1,2,1,2,1,2,1,3,5,3,59,8,3,10,3,12,
		3,62,9,3,1,4,1,4,1,4,3,4,67,8,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,75,8,5,10,
		5,12,5,78,9,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,3,7,96,8,7,1,8,1,8,3,8,100,8,8,1,9,1,9,3,9,104,8,9,1,10,1,10,3,
		10,108,8,10,1,11,1,11,1,11,3,11,113,8,11,1,12,1,12,3,12,117,8,12,1,13,
		1,13,3,13,121,8,13,1,13,0,0,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,
		0,132,0,28,1,0,0,0,2,38,1,0,0,0,4,47,1,0,0,0,6,60,1,0,0,0,8,63,1,0,0,0,
		10,71,1,0,0,0,12,79,1,0,0,0,14,95,1,0,0,0,16,99,1,0,0,0,18,103,1,0,0,0,
		20,107,1,0,0,0,22,112,1,0,0,0,24,116,1,0,0,0,26,120,1,0,0,0,28,29,5,1,
		0,0,29,30,5,25,0,0,30,31,3,10,5,0,31,34,5,26,0,0,32,35,5,29,0,0,33,35,
		3,2,1,0,34,32,1,0,0,0,34,33,1,0,0,0,35,36,1,0,0,0,36,37,5,0,0,1,37,1,1,
		0,0,0,38,42,5,27,0,0,39,41,3,4,2,0,40,39,1,0,0,0,41,44,1,0,0,0,42,40,1,
		0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,42,1,0,0,0,45,46,5,28,0,0,46,3,1,
		0,0,0,47,48,5,18,0,0,48,50,5,25,0,0,49,51,3,10,5,0,50,49,1,0,0,0,50,51,
		1,0,0,0,51,52,1,0,0,0,52,53,5,26,0,0,53,54,5,27,0,0,54,55,3,6,3,0,55,56,
		5,28,0,0,56,5,1,0,0,0,57,59,3,8,4,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,
		1,0,0,0,60,61,1,0,0,0,61,7,1,0,0,0,62,60,1,0,0,0,63,64,5,18,0,0,64,66,
		5,25,0,0,65,67,3,10,5,0,66,65,1,0,0,0,66,67,1,0,0,0,67,68,1,0,0,0,68,69,
		5,26,0,0,69,70,5,29,0,0,70,9,1,0,0,0,71,76,3,12,6,0,72,73,5,30,0,0,73,
		75,3,12,6,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,
		11,1,0,0,0,78,76,1,0,0,0,79,80,5,18,0,0,80,81,5,23,0,0,81,82,3,14,7,0,
		82,13,1,0,0,0,83,96,5,4,0,0,84,96,3,16,8,0,85,96,3,18,9,0,86,96,3,20,10,
		0,87,96,3,22,11,0,88,96,3,24,12,0,89,96,3,26,13,0,90,96,5,18,0,0,91,96,
		5,19,0,0,92,96,5,20,0,0,93,96,5,21,0,0,94,96,5,22,0,0,95,83,1,0,0,0,95,
		84,1,0,0,0,95,85,1,0,0,0,95,86,1,0,0,0,95,87,1,0,0,0,95,88,1,0,0,0,95,
		89,1,0,0,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,1,0,0,0,95,93,1,0,0,0,95,
		94,1,0,0,0,96,15,1,0,0,0,97,100,5,5,0,0,98,100,5,6,0,0,99,97,1,0,0,0,99,
		98,1,0,0,0,100,17,1,0,0,0,101,104,5,9,0,0,102,104,5,10,0,0,103,101,1,0,
		0,0,103,102,1,0,0,0,104,19,1,0,0,0,105,108,5,8,0,0,106,108,5,7,0,0,107,
		105,1,0,0,0,107,106,1,0,0,0,108,21,1,0,0,0,109,113,5,11,0,0,110,113,5,
		12,0,0,111,113,5,13,0,0,112,109,1,0,0,0,112,110,1,0,0,0,112,111,1,0,0,
		0,113,23,1,0,0,0,114,117,5,14,0,0,115,117,5,15,0,0,116,114,1,0,0,0,116,
		115,1,0,0,0,117,25,1,0,0,0,118,121,5,16,0,0,119,121,5,17,0,0,120,118,1,
		0,0,0,120,119,1,0,0,0,121,27,1,0,0,0,13,34,42,50,60,66,76,95,99,103,107,
		112,116,120
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SignalTrader.Signals.SignalScript.Generated
