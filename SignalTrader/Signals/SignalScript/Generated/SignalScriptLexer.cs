//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/cogamble/Projects/Personal/SignalTrader/SignalTrader/Signals/SignalScript/SignalScript.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SignalTrader.Signals.SignalScript.Generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SignalScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WS=2, COMMENT=3, STRING=4, TRUE=5, FALSE=6, SHORT=7, LONG=8, BUY=9, 
		SELL=10, BID=11, ASK=12, LAST=13, MARKET=14, LIMIT=15, CROSS=16, ISOLATED=17, 
		ID=18, FLOAT=19, FLOATP=20, INT=21, INTP=22, ASSIGN=23, PERCENT=24, LPAREN=25, 
		RPAREN=26, LBRACE=27, RBRACE=28, SEMI=29, COMMA=30, NEWLINE=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "WS", "COMMENT", "STRING", "TRUE", "FALSE", "SHORT", "LONG", "BUY", 
		"SELL", "BID", "ASK", "LAST", "MARKET", "LIMIT", "CROSS", "ISOLATED", 
		"ID", "FLOAT", "FLOATP", "INT", "INTP", "ASSIGN", "PERCENT", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", "NEWLINE", "ALNUM", "ALPHA", 
		"LOWER", "UPPER", "DIGIT"
	};


	public SignalScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SignalScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'signal'", null, null, null, "'true'", "'false'", "'short'", "'long'", 
		"'buy'", "'sell'", "'bid'", "'ask'", "'last'", "'market'", "'limit'", 
		"'cross'", "'isolated'", null, null, null, null, null, "'='", "'%'", "'('", 
		"')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WS", "COMMENT", "STRING", "TRUE", "FALSE", "SHORT", "LONG", 
		"BUY", "SELL", "BID", "ASK", "LAST", "MARKET", "LIMIT", "CROSS", "ISOLATED", 
		"ID", "FLOAT", "FLOATP", "INT", "INTP", "ASSIGN", "PERCENT", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SignalScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SignalScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,4,1,82,8,1,11,1,12,1,83,1,1,1,1,1,
		2,1,2,5,2,90,8,2,10,2,12,2,93,9,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,101,8,3,
		10,3,12,3,104,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,5,17,183,8,17,10,17,12,17,186,9,17,1,18,3,18,189,8,
		18,1,18,4,18,192,8,18,11,18,12,18,193,1,18,1,18,5,18,198,8,18,10,18,12,
		18,201,9,18,1,18,3,18,204,8,18,1,18,1,18,4,18,208,8,18,11,18,12,18,209,
		3,18,212,8,18,1,19,1,19,1,19,1,20,3,20,218,8,20,1,20,4,20,221,8,20,11,
		20,12,20,222,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,3,30,245,8,30,1,30,1,30,1,31,
		1,31,3,31,251,8,31,1,32,1,32,3,32,255,8,32,1,33,1,33,1,34,1,34,1,35,1,
		35,1,91,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,0,65,0,67,0,69,0,71,0,1,0,
		5,3,0,9,10,13,13,32,32,1,0,34,34,1,0,97,122,1,0,65,90,1,0,48,57,272,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,73,1,0,0,0,3,81,1,0,0,0,5,87,
		1,0,0,0,7,98,1,0,0,0,9,107,1,0,0,0,11,112,1,0,0,0,13,118,1,0,0,0,15,124,
		1,0,0,0,17,129,1,0,0,0,19,133,1,0,0,0,21,138,1,0,0,0,23,142,1,0,0,0,25,
		146,1,0,0,0,27,151,1,0,0,0,29,158,1,0,0,0,31,164,1,0,0,0,33,170,1,0,0,
		0,35,179,1,0,0,0,37,211,1,0,0,0,39,213,1,0,0,0,41,217,1,0,0,0,43,224,1,
		0,0,0,45,227,1,0,0,0,47,229,1,0,0,0,49,231,1,0,0,0,51,233,1,0,0,0,53,235,
		1,0,0,0,55,237,1,0,0,0,57,239,1,0,0,0,59,241,1,0,0,0,61,244,1,0,0,0,63,
		250,1,0,0,0,65,254,1,0,0,0,67,256,1,0,0,0,69,258,1,0,0,0,71,260,1,0,0,
		0,73,74,5,115,0,0,74,75,5,105,0,0,75,76,5,103,0,0,76,77,5,110,0,0,77,78,
		5,97,0,0,78,79,5,108,0,0,79,2,1,0,0,0,80,82,7,0,0,0,81,80,1,0,0,0,82,83,
		1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,6,1,0,0,86,4,1,
		0,0,0,87,91,5,35,0,0,88,90,9,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,92,1,
		0,0,0,91,89,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,95,3,61,30,0,95,96,
		1,0,0,0,96,97,6,2,0,0,97,6,1,0,0,0,98,102,5,34,0,0,99,101,8,1,0,0,100,
		99,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,1,0,
		0,0,104,102,1,0,0,0,105,106,5,34,0,0,106,8,1,0,0,0,107,108,5,116,0,0,108,
		109,5,114,0,0,109,110,5,117,0,0,110,111,5,101,0,0,111,10,1,0,0,0,112,113,
		5,102,0,0,113,114,5,97,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,117,
		5,101,0,0,117,12,1,0,0,0,118,119,5,115,0,0,119,120,5,104,0,0,120,121,5,
		111,0,0,121,122,5,114,0,0,122,123,5,116,0,0,123,14,1,0,0,0,124,125,5,108,
		0,0,125,126,5,111,0,0,126,127,5,110,0,0,127,128,5,103,0,0,128,16,1,0,0,
		0,129,130,5,98,0,0,130,131,5,117,0,0,131,132,5,121,0,0,132,18,1,0,0,0,
		133,134,5,115,0,0,134,135,5,101,0,0,135,136,5,108,0,0,136,137,5,108,0,
		0,137,20,1,0,0,0,138,139,5,98,0,0,139,140,5,105,0,0,140,141,5,100,0,0,
		141,22,1,0,0,0,142,143,5,97,0,0,143,144,5,115,0,0,144,145,5,107,0,0,145,
		24,1,0,0,0,146,147,5,108,0,0,147,148,5,97,0,0,148,149,5,115,0,0,149,150,
		5,116,0,0,150,26,1,0,0,0,151,152,5,109,0,0,152,153,5,97,0,0,153,154,5,
		114,0,0,154,155,5,107,0,0,155,156,5,101,0,0,156,157,5,116,0,0,157,28,1,
		0,0,0,158,159,5,108,0,0,159,160,5,105,0,0,160,161,5,109,0,0,161,162,5,
		105,0,0,162,163,5,116,0,0,163,30,1,0,0,0,164,165,5,99,0,0,165,166,5,114,
		0,0,166,167,5,111,0,0,167,168,5,115,0,0,168,169,5,115,0,0,169,32,1,0,0,
		0,170,171,5,105,0,0,171,172,5,115,0,0,172,173,5,111,0,0,173,174,5,108,
		0,0,174,175,5,97,0,0,175,176,5,116,0,0,176,177,5,101,0,0,177,178,5,100,
		0,0,178,34,1,0,0,0,179,184,3,65,32,0,180,183,3,63,31,0,181,183,5,95,0,
		0,182,180,1,0,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,
		185,1,0,0,0,185,36,1,0,0,0,186,184,1,0,0,0,187,189,5,45,0,0,188,187,1,
		0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,192,3,71,35,0,191,190,1,0,0,
		0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,
		199,5,46,0,0,196,198,3,71,35,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,
		1,0,0,0,199,200,1,0,0,0,200,212,1,0,0,0,201,199,1,0,0,0,202,204,5,45,0,
		0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,207,5,46,0,0,206,
		208,3,71,35,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,
		1,0,0,0,210,212,1,0,0,0,211,188,1,0,0,0,211,203,1,0,0,0,212,38,1,0,0,0,
		213,214,3,37,18,0,214,215,3,47,23,0,215,40,1,0,0,0,216,218,5,45,0,0,217,
		216,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,221,3,71,35,0,220,219,
		1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,42,1,0,0,0,
		224,225,3,41,20,0,225,226,3,47,23,0,226,44,1,0,0,0,227,228,5,61,0,0,228,
		46,1,0,0,0,229,230,5,37,0,0,230,48,1,0,0,0,231,232,5,40,0,0,232,50,1,0,
		0,0,233,234,5,41,0,0,234,52,1,0,0,0,235,236,5,123,0,0,236,54,1,0,0,0,237,
		238,5,125,0,0,238,56,1,0,0,0,239,240,5,59,0,0,240,58,1,0,0,0,241,242,5,
		44,0,0,242,60,1,0,0,0,243,245,5,13,0,0,244,243,1,0,0,0,244,245,1,0,0,0,
		245,246,1,0,0,0,246,247,5,10,0,0,247,62,1,0,0,0,248,251,3,65,32,0,249,
		251,3,71,35,0,250,248,1,0,0,0,250,249,1,0,0,0,251,64,1,0,0,0,252,255,3,
		69,34,0,253,255,3,67,33,0,254,252,1,0,0,0,254,253,1,0,0,0,255,66,1,0,0,
		0,256,257,7,2,0,0,257,68,1,0,0,0,258,259,7,3,0,0,259,70,1,0,0,0,260,261,
		7,4,0,0,261,72,1,0,0,0,17,0,83,91,102,182,184,188,193,199,203,209,211,
		217,222,244,250,254,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SignalTrader.Signals.SignalScript.Generated
